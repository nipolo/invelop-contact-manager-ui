{"version":3,"file":"src_app_contacts_contacts_module_ts.js","mappings":"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","sources":["./src/app/contacts/add-edit-contact/add-edit-contact.component.ts","./src/app/contacts/add-edit-contact/add-edit-contact.component.html","./src/app/contacts/add-edit-contact/index.ts","./src/app/contacts/contacts-list/contacts-list.component.ts","./src/app/contacts/contacts-list/contacts-list.component.html","./src/app/contacts/contacts-list/index.ts","./src/app/contacts/contacts-routing.module.ts","./src/app/contacts/contacts.component.ts","./src/app/contacts/contacts.component.html","./src/app/contacts/contacts.module.ts","./src/app/contacts/services/contact.service.ts","./src/app/contacts/services/index.ts"],"sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { RegexValidationsConsts } from '@core/constants';\nimport { uiRoutes } from '@core/constants/ui-routes';\nimport { ComponentModeType } from '@core/enums';\nimport { NotificationService } from '@core/services';\nimport { Observable, Subscription, take } from 'rxjs';\nimport { ContactService } from '../services';\n\n@Component({\n  selector: 'app-add-edit-contact',\n  templateUrl: './add-edit-contact.component.html',\n  styleUrls: ['./add-edit-contact.component.scss'],\n})\nexport class AddEditContactComponent implements OnInit, OnDestroy {\n  id: number | null;\n  mode: ComponentModeType;\n  contactForm: FormGroup;\n  subscription: Subscription[] = [];\n  isAddEditButtonClicked = false;\n\n  get title(): string {\n    if (this.mode == ComponentModeType.Add) {\n      return 'Add contact';\n    } else {\n      return 'Edit contact';\n    }\n  }\n\n  get isAdd(): boolean {\n    return this.mode == ComponentModeType.Add;\n  }\n\n  get isUpdate(): boolean {\n    return this.mode == ComponentModeType.Edit;\n  }\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private fb: FormBuilder,\n    private contactService: ContactService,\n    private notificationService: NotificationService\n  ) {\n    const id = this.route.snapshot.paramMap.get('id');\n    if (!id || isNaN(Number(id))) {\n      this.id = null;\n      this.mode = ComponentModeType.Add;\n    } else {\n      this.id = Number(id);\n      this.mode = ComponentModeType.Edit;\n    }\n\n    this.contactForm = this.fb.group({\n      firstName: this.fb.control('', [Validators.required]),\n      surname: this.fb.control('', [Validators.required]),\n      birthDate: this.fb.control('', [Validators.required]),\n      line1: this.fb.control('', [Validators.required]),\n      line2: this.fb.control(''),\n      postcode: this.fb.control('', [Validators.required]),\n      city: this.fb.control('', [Validators.required]),\n      country: this.fb.control('', [Validators.required]),\n      phoneNumber: this.fb.control('', [\n        Validators.required,\n        Validators.pattern(RegexValidationsConsts.PhoneNumber),\n      ]),\n      iban: this.fb.control('', [\n        Validators.required,\n        Validators.pattern(RegexValidationsConsts.IBAN),\n      ]),\n    });\n  }\n\n  ngOnInit(): void {\n    if (this.isUpdate) {\n      this.subscription.push(\n        this.contactService.getContact$(<number>this.id).subscribe((x) =>\n          this.contactForm.patchValue({\n            ...x,\n            ...x.address,\n            birthDate: new Date(x.birthDate),\n          })\n        )\n      );\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.forEach((s) => s.unsubscribe());\n  }\n\n  showErrorMessage(controlName: string, validationType: string) {\n    return (\n      (this.isAddEditButtonClicked ||\n        this.contactForm.controls[controlName].dirty) &&\n      this.contactForm.controls[controlName].errors?.[validationType]\n    );\n  }\n\n  cancel() {\n    this.router.navigate([\n      uiRoutes.contactsModule.base,\n      uiRoutes.contactsModule.routes.allContacts,\n    ]);\n  }\n\n  addEdit() {\n    this.isAddEditButtonClicked = true;\n\n    if (!this.contactForm.valid) {\n      return;\n    }\n\n    let request$: Observable<any>;\n\n    if (this.isAdd) {\n      request$ = this.contactService.addContact$(\n        this.contactForm.value.firstName,\n        this.contactForm.value.surname,\n        this.contactForm.value.birthDate,\n        this.contactForm.value.line1,\n        this.contactForm.value.line2,\n        this.contactForm.value.city,\n        this.contactForm.value.postcode,\n        this.contactForm.value.country,\n        this.contactForm.value.phoneNumber,\n        this.contactForm.value.iban\n      );\n    } else {\n      request$ = this.contactService.editContact$(\n        <number>this.id,\n        this.contactForm.value.firstName,\n        this.contactForm.value.surname,\n        this.contactForm.value.birthDate,\n        this.contactForm.value.line1,\n        this.contactForm.value.line2,\n        this.contactForm.value.city,\n        this.contactForm.value.postcode,\n        this.contactForm.value.country,\n        this.contactForm.value.phoneNumber,\n        this.contactForm.value.iban\n      );\n    }\n    request$.pipe(take(1)).subscribe({\n      next: (_) => {\n        this.router.navigate([\n          uiRoutes.contactsModule.base,\n          uiRoutes.contactsModule.routes.allContacts,\n        ]);\n        this.notificationService.info(\n          `Contact successfully ${this.isAdd ? 'created' : 'updated'}`\n        );\n      },\n      error: (e) => {\n        this.notificationService.error(e.message);\n      },\n    });\n  }\n}\n","<form [formGroup]=\"contactForm\">\n  <h2>{{ title }}</h2>\n  <div class=\"grid p-fluid lg:col-6 md:col-12\">\n    <div class=\"p-col-12 lg:col-4 md:col-12\">\n      <label for=\"firstName\">First Name</label>\n      <input\n        id=\"firstName\"\n        type=\"text\"\n        pInputText\n        formControlName=\"firstName\"\n      />\n      <small\n        *ngIf=\"showErrorMessage('firstName', 'required')\"\n        id=\"firstName-error\"\n        class=\"p-error block\"\n        >First Name required.</small\n      >\n    </div>\n    <div class=\"p-col-12 lg:col-4 md:col-12\">\n      <label for=\"surname\">Surname</label>\n      <input id=\"surname\" type=\"text\" pInputText formControlName=\"surname\" />\n      <small\n        *ngIf=\"showErrorMessage('surname', 'required')\"\n        id=\"surname-error\"\n        class=\"p-error block\"\n        >Surname required.</small\n      >\n    </div>\n    <div class=\"p-col-12 lg:col-4 md:col-12\">\n      <label for=\"birthDate\">Birth Date</label>\n      <p-calendar inputId=\"birthDate\" formControlName=\"birthDate\"></p-calendar>\n      <small\n        *ngIf=\"showErrorMessage('birthDate', 'required')\"\n        id=\"birthDate-error\"\n        class=\"p-error block\"\n        >Birth Date required.</small\n      >\n    </div>\n    <div class=\"p-col-12 lg:col-6 md:col-12\">\n      <label for=\"line1\">Line1</label>\n      <input id=\"line1\" type=\"text\" pInputText formControlName=\"line1\" />\n      <small\n        *ngIf=\"showErrorMessage('line1', 'required')\"\n        id=\"line1-error\"\n        class=\"p-error block\"\n        >Line1 required.</small\n      >\n    </div>\n    <div class=\"p-col-12 lg:col-6 md:col-12\">\n      <label for=\"line2\">Line2</label>\n      <input id=\"line2\" type=\"text\" pInputText formControlName=\"line2\" />\n    </div>\n    <div class=\"p-col-12 lg:col-4 md:col-12\">\n      <label for=\"postcode\">Postcode</label>\n      <input id=\"postcode\" type=\"text\" pInputText formControlName=\"postcode\" />\n      <small\n        *ngIf=\"showErrorMessage('postcode', 'required')\"\n        id=\"postcode-error\"\n        class=\"p-error block\"\n        >Postcode required.</small\n      >\n    </div>\n    <div class=\"p-col-12 lg:col-4 md:col-12\">\n      <label for=\"city\">City</label>\n      <input id=\"city\" type=\"text\" pInputText formControlName=\"city\" />\n      <small\n        *ngIf=\"showErrorMessage('city', 'required')\"\n        id=\"city-error\"\n        class=\"p-error block\"\n        >City required.</small\n      >\n    </div>\n    <div class=\"p-col-12 lg:col-4 md:col-12\">\n      <label for=\"country\">Country</label>\n      <input id=\"country\" type=\"text\" pInputText formControlName=\"country\" />\n      <small\n        *ngIf=\"showErrorMessage('country', 'required')\"\n        id=\"country-error\"\n        class=\"p-error block\"\n        >Country required.</small\n      >\n    </div>\n    <div class=\"p-col-12 lg:col-4 md:col-12\">\n      <label for=\"phoneNumber\">Phone Number</label>\n      <input\n        id=\"phoneNumber\"\n        type=\"text\"\n        pInputText\n        formControlName=\"phoneNumber\"\n      />\n      <small\n        *ngIf=\"showErrorMessage('phoneNumber', 'required')\"\n        id=\"phoneNumber-error\"\n        class=\"p-error block\"\n        >Phone Number required.</small\n      >\n      <small\n        *ngIf=\"showErrorMessage('phoneNumber', 'pattern')\"\n        id=\"phoneNumber-pattern-error\"\n        class=\"p-error block\"\n        >Phone Number is in incorrect format - example +123-456-789 or\n        088-111-1-11</small\n      >\n    </div>\n    <div class=\"p-col-12 lg:col-4 md:col-12\">\n      <label for=\"iban\">IBAN</label>\n      <input id=\"iban\" type=\"text\" pInputText formControlName=\"iban\" />\n      <small\n        *ngIf=\"showErrorMessage('iban', 'required')\"\n        id=\"iban-error\"\n        class=\"p-error block\"\n        >IBAN required.</small\n      >\n      <small\n        *ngIf=\"showErrorMessage('iban', 'pattern')\"\n        id=\"iban-pattern-error\"\n        class=\"p-error block\"\n        >IBAN is in incorrect format - example\n        BG12-ABCD-1234-5678-1234-56</small\n      >\n    </div>\n  </div>\n  <button\n    pButton\n    pRipple\n    id=\"add-edit-btn\"\n    [label]=\"isAdd ? 'Create' : 'Save'\"\n    icon=\"pi pi-check\"\n    class=\"p-button\"\n    (click)=\"addEdit()\"\n  ></button>\n  <button\n    pButton\n    pRipple\n    id=\"cancel-btn\"\n    label=\"Cancel\"\n    icon=\"pi pi-times\"\n    class=\"p-button\"\n    (click)=\"cancel()\"\n  ></button>\n</form>\n","export * from './add-edit-contact.component';\r\n","import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable, of, take } from 'rxjs';\nimport { ContactService } from '../services';\nimport { AddressModel, ContactModel, loadContactsSuccess } from '@core/store';\nimport { NotificationService } from '@core/services';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { uiRoutes } from '@core/constants';\nimport { ConfirmationService } from 'primeng/api';\n\n@Component({\n  selector: 'app-contacts-list',\n  templateUrl: './contacts-list.component.html',\n  styleUrls: ['./contacts-list.component.scss'],\n})\nexport class ContactsListComponent implements OnInit {\n  currentPage = 1;\n  pageSize = 10;\n  contacts$: Observable<ContactModel[]>;\n  totalRecords$: Observable<number>;\n  isLoading = false;\n  rowsPerPageOptions = [3, 5, 10];\n\n  constructor(\n    private contactService: ContactService,\n    private store: Store,\n    private notificationService: NotificationService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private confirmationService: ConfirmationService\n  ) {\n    this.contacts$ = this.contactService.selectAllContacts$();\n    this.totalRecords$ = this.contactService.selectTotalContacts$();\n  }\n\n  ngOnInit(): void {\n    this.isLoading = true;\n    this.loadContacts();\n  }\n\n  addNewContact() {\n    this.router.navigate(['../', uiRoutes.contactsModule.routes.addContact], {\n      relativeTo: this.route,\n    });\n  }\n\n  editContact(contact: ContactModel) {\n    this.router.navigate(\n      ['../', uiRoutes.contactsModule.routes.updateContact.base, contact.id],\n      {\n        relativeTo: this.route,\n      }\n    );\n  }\n\n  deleteProduct(contact: ContactModel) {\n    this.confirmationService.confirm({\n      message: `Are you sure that you want to delete \"${contact.firstName} ${contact.surname}\"contact?`,\n      header: 'Delete contact',\n      icon: 'pi pi-exclamation-triangle',\n      accept: () => {\n        this.contactService\n          .removeContact$(contact.id)\n          .pipe(take(1))\n          .subscribe({\n            next: (_) => {\n              this.loadContacts();\n              this.notificationService.info('Contact successfully deleted');\n            },\n            error: (e) => {\n              this.isLoading = false;\n              this.notificationService.error(e.message);\n            },\n          });\n      },\n      reject: () => {},\n    });\n  }\n\n  formatAddress(address: AddressModel): string {\n    let formattedAdress = address.line1;\n\n    if (!!address.line2) {\n      formattedAdress += ', ' + address.line2;\n    }\n    if (!!address.postcode) {\n      formattedAdress += ', ' + address.postcode;\n    }\n    if (!!address.city) {\n      formattedAdress += ', ' + address.city;\n    }\n    if (!!address.country) {\n      formattedAdress += ', ' + address.country;\n    }\n\n    return formattedAdress;\n  }\n\n  contactsPaginatorChanged($event: any) {\n    this.currentPage = $event.page + 1;\n    this.pageSize = $event.rows;\n    this.loadContacts();\n  }\n\n  private loadContacts() {\n    this.contactService\n      .getAllContacts$(this.currentPage, this.pageSize)\n      .pipe(take(1))\n      .subscribe({\n        next: (x) => {\n          var contacts = x.contacts.map(\n            (dto) =>\n              <ContactModel>{\n                address: <AddressModel>{\n                  city: dto.address.city,\n                  country: dto.address.country,\n                  line1: dto.address.line1,\n                  line2: dto.address.line2,\n                  postcode: dto.address.postcode,\n                },\n                birthDate: dto.birthDate,\n                firstName: dto.firstName,\n                iban: dto.iban,\n                id: dto.id,\n                surname: dto.surname,\n                phoneNumber: dto.phoneNumber,\n              }\n          );\n          this.store.dispatch(\n            loadContactsSuccess({ contacts, totalContacts: x.totalContacts })\n          );\n          this.isLoading = false;\n        },\n        error: (e) => {\n          this.isLoading = false;\n          this.notificationService.error(e.message);\n        },\n      });\n  }\n}\n","<p-progressSpinner *ngIf=\"isLoading; else content\"></p-progressSpinner>\n<ng-template #content>\n  <div class=\"card\">\n    <p-toolbar styleClass=\"p-mb-4\">\n      <ng-template pTemplate=\"left\">\n        <button\n          pButton\n          pRipple\n          id=\"add-new-contact-btn\"\n          label=\"New\"\n          icon=\"pi pi-plus\"\n          class=\"p-button-success p-mr-2\"\n          (click)=\"addNewContact()\"\n        ></button>\n      </ng-template>\n    </p-toolbar>\n    <span *ngIf=\"((contacts$ | async) || []).length == 0; else contactsTable\"\n      >No records found.</span\n    >\n    <ng-template #contactsTable>\n      <p-table styleClass=\"p-datatable-sm\" [value]=\"(contacts$ | async) || []\">\n        <ng-template pTemplate=\"header\">\n          <tr>\n            <th>First Name</th>\n            <th>Surname</th>\n            <th>BirthDate</th>\n            <th>Address</th>\n            <th>Phone Number</th>\n            <th>IBAN</th>\n            <th></th>\n          </tr>\n        </ng-template>\n        <ng-template pTemplate=\"body\" let-contact>\n          <tr>\n            <td>{{ contact.firstName }}</td>\n            <td>{{ contact.surname }}</td>\n            <td>{{ contact.birthDate | date: \"dd/MM/yyyy\" }}</td>\n            <td>{{ formatAddress(contact.address) }}</td>\n            <td>{{ contact.phoneNumber }}</td>\n            <td>{{ contact.iban }}</td>\n            <td>\n              <button\n                pButton\n                pRipple\n                icon=\"pi pi-pencil\"\n                class=\"p-button-rounded p-button-success p-mr-2 edit-product\"\n                (click)=\"editContact(contact)\"\n              ></button>\n              <button\n                pButton\n                pRipple\n                icon=\"pi pi-trash\"\n                class=\"p-button-rounded p-button-warning delete-product\"\n                (click)=\"deleteProduct(contact)\"\n              ></button>\n            </td>\n          </tr>\n        </ng-template>\n      </p-table>\n      <p-paginator\n        [rows]=\"pageSize\"\n        [totalRecords]=\"(totalRecords$ | async) || 0\"\n        [rowsPerPageOptions]=\"rowsPerPageOptions\"\n        (onPageChange)=\"contactsPaginatorChanged($event)\"\n        [showPageLinks]=\"((totalRecords$ | async) || 0) > pageSize\"\n        [showFirstLastIcon]=\"((totalRecords$ | async) || 0) > pageSize\"\n      ></p-paginator>\n    </ng-template>\n  </div>\n</ng-template>\n","export * from './contacts-list.component';\r\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { uiRoutes } from '@core/constants';\nimport { AddEditContactComponent } from './add-edit-contact';\nimport { ContactsListComponent } from './contacts-list';\nimport { ContactsComponent } from './contacts.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ContactsComponent,\n    children: [\n      {\n        path: '',\n        pathMatch: 'full',\n        redirectTo: uiRoutes.contactsModule.routes.allContacts,\n      },\n      {\n        path: uiRoutes.contactsModule.routes.allContacts,\n        pathMatch: 'full',\n        component: ContactsListComponent,\n      },\n      {\n        path: uiRoutes.contactsModule.routes.addContact,\n        pathMatch: 'full',\n        component: AddEditContactComponent,\n      },\n      {\n        path: uiRoutes.contactsModule.routes.updateContact.withParams,\n        pathMatch: 'full',\n        component: AddEditContactComponent,\n      },\n    ],\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ContactsRoutingModule {}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-contacts',\n  templateUrl: './contacts.component.html',\n  styleUrls: ['./contacts.component.scss']\n})\nexport class ContactsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<router-outlet></router-outlet>\n<p-confirmDialog\n  [style]=\"{ width: '50vw' }\"\n  [baseZIndex]=\"10000\"\n  rejectButtonStyleClass=\"p-button-text\"\n></p-confirmDialog>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ContactsRoutingModule } from './contacts-routing.module';\nimport { ContactsComponent } from './contacts.component';\nimport { StoreModule } from '@ngrx/store';\nimport { contactsFeature } from '@core/store';\nimport { ContactsListComponent } from './contacts-list';\nimport { ContactService } from './services';\nimport { SharedModule } from '@shared/index';\nimport { AddEditContactComponent } from './add-edit-contact';\n\n@NgModule({\n  declarations: [\n    ContactsComponent,\n    ContactsListComponent,\n    AddEditContactComponent,\n  ],\n  imports: [\n    CommonModule,\n    ContactsRoutingModule,\n    SharedModule,\n    StoreModule.forFeature(contactsFeature),\n  ],\n  providers: [ContactService],\n})\nexport class ContactsModule {}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { urlRoutes } from '@core/constants';\nimport { UrlGenerationService } from '@core/services';\nimport {\n  AppState,\n  ContactModel,\n  selectContact,\n  selectContacts,\n  selectTotalContacts,\n} from '@core/store';\nimport { Store } from '@ngrx/store';\nimport { filter, map, Observable } from 'rxjs';\nimport {\n  AddContactCommand,\n  AddressDto,\n  RemoveContactCommand,\n  UpdateContactCommand,\n} from '../commands';\nimport { AllContactsDto } from '../dtos';\n\n@Injectable({\n  providedIn: null,\n})\nexport class ContactService {\n  constructor(\n    private http: HttpClient,\n    private urlGenerationService: UrlGenerationService,\n    private store: Store<AppState>\n  ) {}\n\n  getAllContacts$(\n    pageNum: number,\n    pageSize: number\n  ): Observable<AllContactsDto> {\n    return this.http.get<AllContactsDto>(\n      this.urlGenerationService.getApiEndpointUrl(\n        urlRoutes.getGetAllContacts(pageNum, pageSize)\n      )\n    );\n  }\n\n  getContact$(id: number): Observable<ContactModel> {\n    return this.store.select(selectContact(id)).pipe(\n      filter((x) => !!x),\n      map((x) => <ContactModel>x)\n    );\n  }\n\n  addContact$(\n    firstName: string,\n    surname: string,\n    birthDate: Date,\n    line1: string,\n    line2: string,\n    city: string,\n    postcode: string,\n    country: string,\n    phoneNumber: string,\n    iban: string\n  ): Observable<any> {\n    var body = <AddContactCommand>{\n      firstName,\n      address: <AddressDto>{ city, country, line1, line2, postcode },\n      birthDate,\n      iban,\n      phoneNumber,\n      surname,\n    };\n    return this.http.post(\n      this.urlGenerationService.getApiEndpointUrl(urlRoutes.postCreateContact),\n      body\n    );\n  }\n\n  editContact$(\n    id: number,\n    firstName: string,\n    surname: string,\n    birthDate: Date,\n    line1: string,\n    line2: string,\n    city: string,\n    postcode: string,\n    country: string,\n    phoneNumber: string,\n    iban: string\n  ): Observable<any> {\n    var body = <UpdateContactCommand>{\n      id,\n      firstName,\n      address: <AddressDto>{ city, country, line1, line2, postcode },\n      birthDate,\n      iban,\n      phoneNumber,\n      surname,\n    };\n    return this.http.put(\n      this.urlGenerationService.getApiEndpointUrl(urlRoutes.putUpdateContact),\n      body\n    );\n  }\n\n  removeContact$(id: number): Observable<any> {\n    var body = <RemoveContactCommand>{ id };\n    return this.http.delete(\n      this.urlGenerationService.getApiEndpointUrl(\n        urlRoutes.deleteRemoveContact\n      ),\n      { body }\n    );\n  }\n\n  selectAllContacts$(): Observable<ContactModel[]> {\n    return this.store.select(selectContacts);\n  }\n\n  selectTotalContacts$(): Observable<number> {\n    return this.store.select(selectTotalContacts);\n  }\n}\n","export * from './contact.service';\r\n"],"names":["take","loadContactsSuccess","uiRoutes","i0","ctx_r7","ctx_r12","ctx_r14","ctx_r15","ctx_r6","_r5","ContactsListComponent","constructor","contactService","store","notificationService","router","route","confirmationService","contacts$","selectAllContacts$","totalRecords$","selectTotalContacts$","ngOnInit","isLoading","loadContacts","addNewContact","navigate","contactsModule","routes","addContact","relativeTo","editContact","contact","updateContact","base","id","deleteProduct","confirm","message","firstName","surname","header","icon","accept","removeContact$","pipe","subscribe","next","_","info","error","e","reject","formatAddress","address","formattedAdress","line1","line2","postcode","city","country","contactsPaginatorChanged","$event","currentPage","page","pageSize","rows","getAllContacts$","x","contacts","map","dto","birthDate","iban","phoneNumber","dispatch","totalContacts","selectors","decls","vars","consts","template","_r1"],"sourceRoot":"webpack:///"}